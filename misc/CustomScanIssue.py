from helpers.FloydsHelpers import FloydsHelpers
from java.net import URL
from .Misc import CustomRequestResponse
from burp import IScanIssue

class CustomScanIssue(IScanIssue):
    def __init__(self, _httpMessages, _name, _detail, _confidence, _severity, _httpService=None, _url=None,
                 _issue_type=0x08000000):
        # Some attributes had to be renamed to end in Py as Jython complains about read-only attributes otherwise...
        self.httpMessagesPy = _httpMessages
        self.name = _name
        self.detail = _detail
        self.severityPy = _severity
        self.confidencePy = _confidence
        self.type = _issue_type
        self.httpServicePy = _httpService
        if not self.httpServicePy and _httpMessages:
            self.httpServicePy = _httpMessages[0].getHttpService()
        self.urlPy = _url

    def create_copy(self):
        # list() makes sure we copy
        return CustomScanIssue(list(self.httpMessagesPy), self.name, self.detail, self.confidencePy,
                               self.severityPy, self.httpServicePy, self.urlPy, self.type)

    def get_base_request_response(self):
        return self.httpMessagesPy[0]

    def getUrl(self):
        return self.urlPy

    def setUrl(self, url):
        self.urlPy = url

    def getIssueName(self):
        return self.name

    def getIssueType(self):
        return self.type

    def getSeverity(self):
        return self.severityPy

    def getConfidence(self):
        return self.confidencePy

    def getIssueBackground(self):
        return None

    def getRemediationBackground(self):
        return None

    def getIssueDetail(self):
        return "This issue was generated by the UploadScanner extension.<br><br>" + self.detail

    def getRemediationDetail(self):
        return None

    def getHttpMessages(self):
        return self.httpMessagesPy

    def setHttpService(self, service):
        self.httpServicePy = service

    def getHttpService(self):
        return self.httpServicePy

    def serialize(self):
        #print(type(self.httpMessagesPy[0].serialize()), [type(x) for x in (self.name, self.detail, self.confidencePy, \)
        #                                                                   self.severityPy, CustomHttpService.to_url(self.httpServicePy), str(self.urlPy), self.type)]
        msgs = []
        for x in self.httpMessagesPy:
            if x:
                # x could be a burp.mvi instead of CustomRequestResponse and therefore wouldn't have a serialize method
                m = CustomRequestResponse(x.getComment(), x.getHighlight(), x.getHttpService(), x.getRequest(), x.getResponse())
                msgs.append(m.serialize())
            else:
                msgs.append(None)
        return msgs, self.name, self.detail, self.confidencePy, \
            self.severityPy, CustomHttpService.to_url(self.httpServicePy), str(self.urlPy), self.type

    def deserialize(self, serialized_object):
        messages, self.name, self.detail, self.confidencePy, self.severityPy, service, \
            url_str, self.type = serialized_object
        self.httpMessagesPy = []
        for x in messages:
            if x:
                a = CustomRequestResponse(None, None, None, None, None)
                a.deserialize(x)
                self.httpMessagesPy.append(a)
            else:
                self.httpMessagesPy.append(None)
        self.httpServicePy = CustomHttpService(service)
        self.urlPy = URL(url_str)

    def toString(self):
        txt = "### URL: " + str(self.urlPy)
        txt += "\nName: " + str(self.name)
        # txt += ", Type: " + str(self.type)
        txt += ", Severity: " + str(self.severityPy)
        txt += ", Confidence: " + str(self.confidencePy)
        txt += ", Details: \n" + str(self.detail)
        i = 0
        for msg in self.httpMessagesPy:
            txt += "\n\nHttpService " + str(i) + ": " + CustomHttpService.to_url(msg.getHttpService())
            txt += "\n\nRequest " + str(i) + "\n"+ repr(FloydsHelpers.jb2ps(msg.getRequest()))
            txt += "\n\nResponse " + str(i) + "\n" + repr(FloydsHelpers.jb2ps(msg.getResponse()))
            i += 1
        return txt
